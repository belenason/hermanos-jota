/*
===========================================
  HERMANOS JOTA - FUNCIONES JAVASCRIPT
===========================================

// ==========================================
// 1. DATOS DE PRODUCTOS
// ==========================================

/**
 * Cat√°logo de datos de productos
 * @type {Array<Object>} Array de objetos producto con propiedades completas
 */
const PRODUCTS = [
  {
    id: 1,
    nombre: "Aparador Uspallata",
    precio: 80.00,
    descripcion: "Aparador de seis puertas fabricado en nogal sostenible con tiradores met√°licos en acabado lat√≥n. Su silueta minimalista realza el veteado natural de la madera, creando una pieza que combina funcionalidad y elegancia atemporal para espacios contempor√°neos.",
    medidas: "180 x 45 x 75 cm",
    materiales: "Nogal macizo FSC¬Æ, herrajes de lat√≥n",
    acabado: "Aceite natural ecol√≥gico",
    peso: "68 kg",
    capacidad: "6 compartimentos interiores",
    imagenes: [
      "img/aparador_uspallata.png",
    ]
  },
  {
    id: 2,
    nombre: "Biblioteca Recoleta",
    precio: 0,
    descripcion: "Sistema modular de estantes abierto que combina estructura de acero Sage Green y repisas en roble claro. Perfecta para colecciones y objetos de dise√±o, su dise√±o vers√°til se adapta a cualquier espacio contempor√°neo con elegancia funcional.",
    medidas: "100 x 35 x 200 cm",
    materiales: "Estructura de acero, estantes de roble",
    acabado: "Laca mate ecol√≥gica",
    capacidad: "45 kg por estante",
    modulares: "5 estantes ajustables",
    imagenes: [
      "img/biblioteca_recoleta.png"
    ]
  },
  {
    id: 3,
    nombre: "Butaca Mendoza",
    precio: 0,
    descripcion: "Butaca tapizada en boucl√© Dusty Rose con base de madera de guatamb√∫. El respaldo curvo abraza el cuerpo y ofrece m√°ximo confort, mientras que su dise√±o org√°nico aporta calidez y sofisticaci√≥n a cualquier ambiente contempor√°neo.",
    medidas: "80 x 75 x 85 cm",
    materiales: "Guatamb√∫ macizo, tela boucl√©",
    acabado: "Cera vegetal, tapizado premium",
    tapizado: "Repelente al agua y manchas",
    confort: "Espuma alta densidad",
    imagenes: [
      "img/butacaMendoza.png"
    ]
  },
  {
    id: 4,
    nombre: "Sill√≥n Copacabana",
    precio: 0,
    descripcion: "Sill√≥n lounge en cuero cognac con base giratoria en acero Burnt Sienna. Inspirado en la est√©tica brasilera moderna de los 60, combina comodidad excepcional con un dise√±o ic√≥nico que trasciende tendencias y √©pocas.",
    medidas: "90 x 85 x 95 cm",
    materiales: "Cuero curtido vegetal, acero pintado",
    acabado: "Cuero anilina premium",
    rotacion: "360¬∞ silenciosa y suave",
    garantia: "10 a√±os en estructura",
    imagenes: [
      "img/sillon_copacabana.png"
    ]
  },
  { 
    id: 5,
    nombre: "Mesa de Centro Araucaria",
    precio: 0,
    descripcion: "Mesa de centro con sobre circular de m√°rmol Patagonia y base de tres patas en madera de nogal. Su dise√±o minimalista se convierte en el punto focal perfecto para cualquier sala de estar contempor√°nea, combinando la frialdad del m√°rmol con la calidez de la madera.",
    medidas: "90 x 90 x 45 cm",
    materiales: "Sobre de m√°rmol Patagonia, patas de nogal",
    acabado: "M√°rmol pulido, aceite natural en madera",
    peso:"42 kg",
    cargaMaxima:"25 kg distribuidos",
    imagenes: [
      "img/mesa_de_centro_araucaria.png"
    ]
  },
  {
    id: 6,
    nombre: "Mesa de Noche Aconcagua ",
    precio: 0,
    descripcion: "Mesa de noche con caj√≥n oculto y repisa inferior en roble certificado FSC¬Æ. Su dise√±o limpio y funcional permite convivir con diferentes estilos de dormitorio, ofreciendo almacenamiento discreto y elegante para objetos personales. ",
    medidas: "45 x 35 x 60 cm",
    materiales: "Roble macizo FSC¬Æ, herrajes soft-close",
    acabado: "Barniz mate de poliuretano",
    almacenamiento:"1 caj√≥n + repisa inferior",
    caracteristucas:"Caj√≥n con cierre suave",
    imagenes:[
      "img/mesa_de_noche_aconcagua.png"
    ]
  },
  {
    id: 7,
    nombre: "Cama Neuqu√©n",
    precio: 0,
    descripcion: "Cama plataforma con cabecero flotante tapizado en lino natural y estructura de madera maciza. Su dise√±o minimalista y sofisticado crea un ambiente de serenidad y elegancia, ideal para dormitorios contempor√°neos que buscan paz y simplicidad.",
    medidas: "160 x 200 x 90 cm",
    materiales: "Roble macizo FSC¬Æ, tapizado en lino",
    acabado: "Aceite natural, tapizado premium",
    colchon: "Compatible con colch√≥n 160 x 200",
    caracteristicas: "Cabecero flotante acolchado",
    imagenes: [
      "img/cama_neuquen.png"
    ]
  },
  {
    id: 8,
    nombre: "Sof√° Patagonia",
    precio: 0,
    descripcion: "Sof√° de tres cuerpos tapizado en lino Warm Alabaster con patas c√≥nicas de madera. Los cojines combinan espuma de alta resiliencia con plum√≥n reciclado, brindando comodidad duradera y sostenible para el hogar moderno.",
    medidas: "220 x 90 x 80 cm",
    estructura:  "Madera de eucalipto FSC¬Æ",
    tapizado: "Lino 100% natural premium",
    relleno: "Espuma HR + plum√≥n reciclado",
    sostenibilidad: "Materiales 100% reciclables",
    imagenes: [
      "img/sofa_patagonia.png"
    ]
  },
  {
    id: 9,
    nombre: "Mesa Comedor Pampa",
    precio: 0,
    descripcion: "Mesa extensible de roble macizo con tablero biselado y sistema de apertura suave. Su dise√±o robusto y elegante se adapta perfectamente a reuniones √≠ntimas o grandes celebraciones familiares, extendi√©ndose de 6 a 10 comensales.",
    medidas: "160-240 x 90 x75 cm",
    materiales: "Roble macizo FSC¬Æ, mecanismo alem√°n",
    acabado: "Aceite-cera natural",
    capacidad: "6-10 comensales",
    extension: "Sistema de mariposa central",
    imagenes: [
      "img/mesa_comedor_pampa.png"
    ]
  },
  {
    id: 10,
    nombre: "Sillas C√≥rdoba",
    precio: 0,
    descripcion: "Set de cuatro sillas apilables en contrachapado moldeado de nogal y estructura tubular pintada en Sage Green. Su dise√±o ergon√≥mico y materiales de calidad garantizan comodidad y durabilidad en el uso diario, perfectas para comedores contempor√°neos.",
    medidas: "45 x 52 x 80 cm (cada una)",
    materiales: "Contrachapado nogal, tubo de acero",
    acabado: "Laca mate, pintura epoxi",
    apilables: "Hasta 6 sillas",
    incluye: "Set de 4 sillas",
    imagenes: [
      "img/sillas_cordoba.png"
    ]
  },
  {
    id: 11,
    nombre: "Escritorio Costa",
    precio: 0,
    descripcion: "Escritorio compacto con caj√≥n organizado y tapa pasacables integrada en bamb√∫ laminado. Ideal para espacios de trabajo en casa, combina funcionalidad moderna con est√©tica minimalista y sostenible, perfecto para el trabajo remoto.",
    medidas: "120 x 60 x 75 cm",
    materiales: "Bamb√∫ laminado, herrajes ocultos",
    acabado: "Laca mate resistente",
    almacenamiento: "1 caj√≥n con organizador",
    cables: "Pasacables integrado",
    imagenes: [
      "img/escritorio_costa.png"
    ]
  },
  {
    id: 12,
    nombre: "Silla de Trabajo Belgrano",
    precio: 0,
    descripcion: "Silla ergon√≥mica regulable en altura con respaldo de malla transpirable y asiento tapizado en tejido reciclado. Dise√±ada para largas jornadas de trabajo con m√°ximo confort y apoyo lumbar, ideal para oficinas en casa y espacios de coworking.",
    medidas: "60 x 60 x 90-100 cm",
    materiales: "Malla t√©cnica, tejido reciclado",
    acabado: "Base cromada, tapizado premium",
    regulacion: "Altura + inclinaci√≥n respaldo",
    certificacion: "Ergonom√≠a europea EN 1335",
    imagenes: [
      "img/silla_de_trabajo_belgrano.png"
    ]
  }
];

// ==========================================
// 2. FUNCIONES DE UTILIDAD
// ==========================================

/**
 * Formatea n√∫meros como moneda argentina
 * @param {number} n - N√∫mero a formatear
 * @returns {string} Precio formateado en pesos argentinos
 */
function formatARS(n) {
  return Number(n || 0).toLocaleString("es-AR", { 
    style: "currency", 
    currency: "ARS", 
    maximumFractionDigits: 0 
  });
}

/**
 * Obtiene el carrito del localStorage con manejo de errores
 * @returns {Array} Array de items del carrito
 */
function getCart() {
  try { 
    return JSON.parse(localStorage.getItem("cart") || "[]"); 
  } catch { 
    return []; 
  }
}

/**
 * Calcula el n√∫mero total de items en el carrito
 * @returns {number} Cantidad total de items
 */
function getCartCount() {
  return getCart().reduce((sum, item) => sum + (parseInt(item.qty, 10) || 0), 0);
}

/**
 * Actualiza el badge visual del contador del carrito
 */
function renderCartBadge() {
  const badge = document.querySelector(".elbadge");
  if (badge) badge.textContent = getCartCount();
}

/**
 * Muestra un indicador de carga
 * @param {HTMLElement} container - Contenedor donde mostrar el loader
 */
function showLoader(container) {
  if (!container) return;
  container.innerHTML = `
    <div class="text-center justify-content-center py-5">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando productos...</span>
      </div>
      <p class="mt-2 text-muted">Cargando productos...</p>
    </div>
  `;
}

// ==========================================
// 3. SERVICIOS AS√çNCRONOS
// ==========================================

/**
 * Simula una llamada a API para obtener productos con retraso as√≠ncrono
 * @param {number} delay - Tiempo de retraso en milisegundos (por defecto 1000ms)
 * @returns {Promise<Array>} Promise que resuelve con el array de productos
 */
function fetchProducts(delay = 1000) {
  return new Promise((resolve, reject) => {
    console.log(`üîÑ Simulando carga de productos (${delay}ms)...`);
    
    setTimeout(() => {
      try {
        // Simular posibles errores de red (5% de probabilidad)
        if (Math.random() < 0.05) {
          throw new Error('Error de conexi√≥n simulado');
        }
        
        console.log('‚úÖ Productos cargados exitosamente');
        resolve([...PRODUCTS]); // Clonar array para simular datos de API
      } catch (error) {
        console.error('‚ùå Error al cargar productos:', error);
        reject(error);
      }
    }, delay);
  });
}

/**
 * Obtiene un producto espec√≠fico por ID de forma as√≠ncrona
 * @param {number} id - ID del producto a buscar
 * @param {number} delay - Tiempo de retraso en milisegundos (por defecto 500ms)
 * @returns {Promise<Object|null>} Promise que resuelve con el producto o null si no se encuentra
 */
async function fetchProductById(id, delay = 500) {
  try {
    console.log(`üîÑ Buscando producto ID: ${id}...`);
    
    // Simular retraso de API
    await new Promise(resolve => setTimeout(resolve, delay));
    
    const product = PRODUCTS.find(p => p.id === Number(id));
    
    if (!product) {
      console.warn(`‚ö†Ô∏è Producto con ID ${id} no encontrado`);
      return null;
    }
    
    console.log(`‚úÖ Producto encontrado: ${product.nombre}`);
    return { ...product }; // Clonar objeto para simular datos de API
    
  } catch (error) {
    console.error('‚ùå Error al buscar producto:', error);
    throw error;
  }
}

/**
 * Simula b√∫squeda de productos con filtros
 * @param {string} query - T√©rmino de b√∫squeda
 * @param {number} delay - Tiempo de retraso en milisegundos
 * @returns {Promise<Array>} Promise que resuelve con productos filtrados
 */
async function searchProducts(query, delay = 300) {
  try {
    console.log(`üîç Buscando productos: "${query}"...`);
    
    // Simular retraso de b√∫squeda
    await new Promise(resolve => setTimeout(resolve, delay));
    
    const filtered = query.trim() === '' 
      ? [...PRODUCTS]
      : PRODUCTS.filter(p =>
          (p.nombre && p.nombre.toLowerCase().includes(query.toLowerCase())) ||
          (p.descripcion && p.descripcion.toLowerCase().includes(query.toLowerCase()))
        );
    
    console.log(`‚úÖ Encontrados ${filtered.length} productos`);
    return filtered;
    
  } catch (error) {
    console.error('‚ùå Error en b√∫squeda:', error);
    throw error;
  }
}

// ==========================================
// 4. FUNCIONALIDAD DEL NAVBAR
// ==========================================

/**
 * IIFE para inicializar el comportamiento del navbar
 * Gestiona la transparencia del navbar y comportamiento m√≥vil:
 * - Navbar transparente en desktop cuando est√° en el tope de la p√°gina
 * - Fondo s√≥lido cuando se hace scroll o en m√≥vil
 * - Maneja estados de colapso del men√∫ m√≥vil
 */
(function initializeNavbar() {
  const navbar = document.querySelector(".custom-navbar");
  const collapse = document.querySelector(".navbar-collapse");
  
  // Salir si el navbar no existe en la p√°gina actual
  if (!navbar) return;

  /**
   * Verifica si el viewport actual es de tama√±o desktop
   * @returns {boolean} True si es desktop (768px+), false si es m√≥vil
   */
  const isDesktop = () => window.matchMedia("(min-width: 768px)").matches;

  /**
   * Detecta si estamos en la p√°gina de producto
   * @returns {boolean} True si estamos en producto.html
   */
  const isProductPage = () => {
    return window.location.pathname.includes('producto.html') || 
           document.body.classList.contains('product-page') ||
           document.querySelector('.product-gallery') !== null;
  };

  /**
   * Aplica el estilo apropiado del navbar basado en posici√≥n del scroll y tipo de dispositivo
   */
  function applyNavbarState() {
    // En m√≥vil: siempre mostrar fondo s√≥lido para legibilidad
    if (!isDesktop()) {
      navbar.classList.add("scrolled");
      navbar.classList.remove("transparent");
      return;
    }

    // En p√°gina de producto: NUNCA transparente, siempre fondo s√≥lido
    if (isProductPage()) {
      navbar.classList.add("scrolled");
      navbar.classList.remove("transparent");
      return;
    }

    // En otras p√°ginas desktop: alternar transparencia basado en posici√≥n del scroll
    if (window.scrollY > 50) {
      navbar.classList.add("scrolled");     // Fondo s√≥lido + sombra
      navbar.classList.remove("transparent");
    } else {
      navbar.classList.add("transparent");  // Fondo transparente
      navbar.classList.remove("scrolled");
    }
  }

  // Event Listeners para el navbar
  document.addEventListener("DOMContentLoaded", applyNavbarState);
  window.addEventListener("scroll", applyNavbarState, { passive: true });
  window.addEventListener("resize", applyNavbarState);

  // Manejo del colapso del men√∫ m√≥vil
  if (collapse) {
    collapse.addEventListener("show.bs.collapse", () => {
      navbar.classList.add("scrolled");
      navbar.classList.remove("transparent");
    });
    
    collapse.addEventListener("hide.bs.collapse", applyNavbarState);
  }
})();

// ==========================================
// 5. FUNCIONALIDAD DEL CAT√ÅLOGO DE PRODUCTOS
// ==========================================

// ========== 5.1. INICIALIZACI√ìN DE PRODUCTOS ==========

/**
 * Inicializa la visualizaci√≥n del cat√°logo de productos para p√°ginas home y cat√°logo
 * con carga as√≠ncrona simulada
 */
async function initProductos() {
  console.log('üöÄ Inicializando productos con carga as√≠ncrona');
  
  // Verificaci√≥n de existencia de contenedores
  const desktopContainer = document.getElementById("products-container");
  const carouselContainer = document.getElementById("products-carousel-container");
  const indicatorsContainer = document.getElementById("products-carousel-indicators");

  if (!desktopContainer || !carouselContainer) {
    console.log('Contenedores de productos no encontrados en esta p√°gina');
    return;
  }

  // Prevenir duplicaci√≥n
  if (desktopContainer.children.length > 0) {
    console.log('Productos ya cargados, evitando duplicaci√≥n');
    return;
  }

  try {
    // Mostrar loader
    showLoader(desktopContainer);
    showLoader(carouselContainer);
    
    // Cargar productos de forma as√≠ncrona
    const products = await fetchProducts(1500); // 1.5 segundos de carga
    
    // Transformar datos para vista simplificada
    const productos = products.map(p => ({
      id: p.id,
      nombre: p.nombre,
      precio: `$${p.precio.toLocaleString("es-AR")}`,
      img: p.imagenes[0]
    }));

    console.log('üì¶ Renderizando productos cargados...');

    // Limpiar contenedores
    desktopContainer.innerHTML = '';
    carouselContainer.innerHTML = '';
    if (indicatorsContainer) {
      indicatorsContainer.innerHTML = '';
    }

    // Variables para acumular HTML
    let desktopHTML = '';
    let carouselHTML = '';
    let indicatorsHTML = '';

    // Generar HTML para cada producto (limitado a los primeros 4)
    productos.forEach((prod, index) => {
      if(prod.id <= 4){
        // HTML para grilla desktop
        desktopHTML += `
          <div class="col-md-3 col-sm-6">
            <article class="product-card text-center h-100">
              <a href="producto.html?id=${encodeURIComponent(prod.id)}" style="text-decoration:none; color:inherit;">
                <div class="product-image">
                  <img src="${prod.img}" alt="${prod.nombre}" class="img-fluid">
                </div>
                <div class="product-info">
                  <h3 class="product-dest-title">${prod.nombre}</h3>
                  <p class="product-price">${prod.precio}</p>
                </div>
              </a>
            </article>
          </div>
        `;
        
        // HTML para carrusel m√≥vil
        carouselHTML += `
          <div class="carousel-item ${index === 0 ? "active" : ""}">
            <article class="product-card mx-auto text-center">
              <a href="producto.html?id=${encodeURIComponent(prod.id)}" style="text-decoration:none; color:inherit;">
                <div class="product-image">
                  <img src="${prod.img}" alt="${prod.nombre}" class="img-fluid">
                </div>
                <div class="product-info">
                  <h3 class="product-dest-title">${prod.nombre}</h3>
                  <p class="product-price">${prod.precio}</p>
                </div>
              </a>
            </article>
          </div>
        `;

        // HTML para indicadores del carrusel
        if (indicatorsContainer) {
          indicatorsHTML += `
            <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="${index}" 
                    class="${index === 0 ? 'active' : ''}" 
                    aria-current="${index === 0 ? 'true' : 'false'}" 
                    aria-label="Slide ${index + 1}"></button>
          `;
        }
      }
    });

    // Insertar HTML generado (una sola operaci√≥n DOM por contenedor)
    desktopContainer.innerHTML = desktopHTML;
    carouselContainer.innerHTML = carouselHTML;
    if (indicatorsContainer) {
      indicatorsContainer.innerHTML = indicatorsHTML;
    }

    console.log('‚úÖ Productos renderizados correctamente:', productos.length, 'productos');
    
  } catch (error) {
    console.error('‚ùå Error al cargar productos:', error);
    
    // Mostrar mensaje de error
    const errorHTML = `
      <div class="alert alert-danger text-center" role="alert">
        <h5>Error al cargar productos</h5>
        <p>No se pudieron cargar los productos. Por favor, recarga la p√°gina.</p>
        <button class="btn btn-primary" onclick="location.reload()">Recargar p√°gina</button>
      </div>
    `;
    
    desktopContainer.innerHTML = errorHTML;
    carouselContainer.innerHTML = errorHTML;
  }
}

// ========== 5.2. RENDERIZADO DEL CAT√ÅLOGO ==========

/**
 * Renderiza la grilla del cat√°logo con productos filtrados
 * @param {Array} products - Array de productos a mostrar
 */
function renderCatalogGrid(products) {
  const grid = document.querySelector(".grilla");
  if (!grid) return;

  if (products.length === 0) {
    grid.innerHTML = `
      <div class="col-12 text-center py-5">
        <h3 class="text-muted">No se encontraron productos</h3>
        <p>Intenta con otros t√©rminos de b√∫squeda</p>
      </div>
    `;
    return;
  }

  grid.innerHTML = products.map(p => {
    const img = (p.imagenes && p.imagenes[0]) ? p.imagenes[0] : "img/producto-ejemplo.jpg";
    return `
      <article class="estiloProducto botonAgregarCarro">
        <a href="producto.html?id=${encodeURIComponent(p.id)}" style="text-decoration:none;color:inherit;">
          <img src="${img}" alt="${p.nombre}" />
          <div class="estiloProducto-content">
            <h3>${p.nombre}</h3>
            <p>${p.descripcion ? p.descripcion : ""}</p>
            <span class="price">${formatARS(p.precio)}</span>
          </div>
        </a>
        <button class="btn-add-to-cart" data-id="${p.id}">Agregar al Carrito</button>
      </article>
    `;
  }).join("");
}

// ========== 5.3. P√ÅGINA DEL CAT√ÅLOGO ==========

/**
 * Inicializa la p√°gina del cat√°logo de productos con carga as√≠ncrona
 */
async function initCatalogPage() {
  const grid = document.querySelector(".grilla");
  const input = document.getElementById("search-input");
  const button = input ? input.parentElement.querySelector("button") : null;
  
  // Solo ejecutar si existe la grilla (p√°gina productos.html)
  if (!grid) return;

  try {
    console.log('üöÄ Inicializando cat√°logo con carga as√≠ncrona');
    
    // Mostrar loader inicial
    showLoader(grid);
    
    // Cargar productos de forma as√≠ncrona
    const products = await fetchProducts(1200); // 1.2 segundos de carga
    
    // Renderizar productos cargados
    renderCatalogGrid(products);
    
    const alerta = document.getElementById("alerta-carrito");

    // Funcionalidad agregar al carrito con addEventListener
    grid.addEventListener("click", async (e) => {
      const btn = e.target.closest(".btn-add-to-cart");
      if (!btn) return;
      
      // Prevenir m√∫ltiples clics
      if (btn.disabled) return;
      btn.disabled = true;
      btn.textContent = "Agregando...";
      
      try {
        const id = btn.getAttribute("data-id");
        const cart = getCart();
        const item = cart.find(i => i.id === id);
        
        // Simular proceso as√≠ncrono de agregar al carrito
        await new Promise(resolve => setTimeout(resolve, 300));
        
        if (item) item.qty += 1; 
        else cart.push({ id, qty: 1 });
        
        localStorage.setItem("cart", JSON.stringify(cart));
        renderCartBadge();

        // Mostrar alerta de confirmaci√≥n
        if (alerta) {
          alerta.classList.add("mostrar");
          setTimeout(() => {
            alerta.classList.remove("mostrar");
          }, 3000);
        }
        
        console.log(`‚úÖ Producto ${id} agregado al carrito`);
        
      } catch (error) {
        console.error('‚ùå Error al agregar al carrito:', error);
      } finally {
        // Restaurar bot√≥n
        btn.disabled = false;
        btn.textContent = "Agregar al Carrito";
      }
    });

    // Funcionalidad de b√∫squeda as√≠ncrona
    let searchTimeout;
    const doSearch = async () => {
      const query = (input?.value || "").trim();
      
      try {
        // Realizar b√∫squeda as√≠ncrona
        const filtered = await searchProducts(query, 300);
        renderCatalogGrid(filtered);
        
        // Remover indicador
        searchIndicator?.remove();
        
      } catch (error) {
        console.error('‚ùå Error en b√∫squeda:', error);
        // En caso de error, usar b√∫squeda local como fallback
        const filtered = query === '' ? products : products.filter(p =>
          (p.nombre && p.nombre.toLowerCase().includes(query.toLowerCase())) ||
          (p.descripcion && p.descripcion.toLowerCase().includes(query.toLowerCase()))
        );
        renderCatalogGrid(filtered);
      }
    };

    // Event listeners para b√∫squeda con debounce
    input?.addEventListener("input", () => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(doSearch, 500); // Debounce de 500ms
    });
    
    button?.addEventListener("click", (ev) => { 
      ev.preventDefault(); 
      clearTimeout(searchTimeout);
      doSearch(); 
    });
    
    console.log('‚úÖ Cat√°logo inicializado correctamente');
    
  } catch (error) {
    console.error('‚ùå Error al inicializar cat√°logo:', error);
    grid.innerHTML = `
      <div class="col-12 text-center py-5">
        <div class="alert alert-danger">
          <h4>Error al cargar el cat√°logo</h4>
          <p>No se pudieron cargar los productos. Por favor, recarga la p√°gina.</p>
          <button class="btn btn-secondary" onclick="location.reload()">Recargar p√°gina</button>
        </div>
      </div>
    `;
  }
}

// ==========================================
// 6. P√ÅGINA DE PRODUCTO INDIVIDUAL
// ==========================================

/**
 * Inicializa la p√°gina de producto individual con carga as√≠ncrona
 */
document.addEventListener("DOMContentLoaded", async () => {
  const container = document.getElementById("product");
  
  // Solo ejecutar en producto.html
  if (!container) return;

  try {
    console.log('üöÄ Inicializando p√°gina de producto individual');
    
    // Mostrar loader inicial
    showLoader(container);
    
    // Obtener ID del producto de los par√°metros URL
    const params = new URLSearchParams(location.search);
    const productId = Number(params.get("id"));
    
    if (!productId) {
      container.innerHTML = `
        <div class="alert alert-warning">
          <h2>ID de producto no v√°lido</h2>
          <p><a href="productos.html" class="btn btn-primary">Volver al cat√°logo</a></p>
        </div>
      `;
      return;
    }
    
    // Cargar producto de forma as√≠ncrona
    const product = await fetchProductById(productId, 800);
    
    if (!product) {
      container.innerHTML = `
        <div class="alert alert-warning">
          <h2>Producto no encontrado</h2>
          <p>El producto que buscas no existe o ha sido eliminado.</p>
          <p><a href="productos.html" class="btn btn-primary">Volver al cat√°logo</a></p>
        </div>
      `;
      return;
    }

    // ========== GENERACI√ìN DE HTML DEL PRODUCTO ==========
    
    console.log('üì¶ Renderizando producto:', product.nombre);
    
    const carouselId = "productGallery";
    const imgs = (product.imagenes && product.imagenes.length ? product.imagenes : ['img/producto-ejemplo.jpg']);

    // Generar slides del carrusel
    const slides = imgs.map((src, i) => `
      <div class="carousel-item ${i===0 ? 'active':''}">
        <img src="${src}" class="d-block w-100" alt="${product.nombre} ${i+1}">
      </div>
    `).join("");

    // Generar indicadores del carrusel
    const indicators = imgs.map((_, i) => `
      <button type="button" data-bs-target="#${carouselId}" data-bs-slide-to="${i}" 
              class="${i===0?'active':''}" aria-label="Slide ${i+1}"></button>
    `).join("");

    // HTML completo del producto
    container.innerHTML = `
      <h1 class="product-title">${product.nombre}</h1>

      <section class="product-gallery mb-3">
        <div id="${carouselId}" class="carousel slide" data-bs-ride="false">
          <div class="carousel-indicators">
            ${indicators}
          </div>
          <div class="carousel-inner">
            ${slides}
          </div>
          <button class="carousel-control-prev" type="button" data-bs-target="#${carouselId}" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Anterior</span>
          </button>
          <button class="carousel-control-next" type="button" data-bs-target="#${carouselId}" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Siguiente</span>
          </button>
        </div>

        <!-- Miniaturas -->
        <div class="product-thumbs">
          ${imgs.map((src, i)=>`<img src="${src}" data-idx="${i}" class="${i===0?'active':''}" alt="Thumb ${i+1}">`).join("")}
        </div>
      </section>

      <section class="product-detail">
        <div class="row g-4">
          <div class="col-lg-7">
            ${product.descripcion ? `<p class="product-desc">${product.descripcion}</p>` : ""}
            <ul class="product-specs">
              ${product.medidas ? `<li><strong>Medidas:</strong> ${product.medidas}</li>` : ""}
              ${product.materiales ? `<li><strong>Materiales:</strong> ${product.materiales}</li>` : ""}
              ${product.acabado ? `<li><strong>Acabado:</strong> ${product.acabado}</li>` : ""}
            </ul>
          </div>
          <div class="col-lg-5">
            <div class="purchase-card">
              <div class="price">$ ${Number(product.precio || 0).toLocaleString("es-AR")}</div>
              <div class="label">Cantidad</div>
              <div class="qty-input mb-3">
                <input id="qty" type="number" min="1" max="99" value="1" class="form-control">
              </div>
              <div class="d-flex gap-2">
                <button id="addToCartBtn" class="btn-brand">A√±adir al carrito</button>
                <a href="productos.html" class="btn-outline-brand">Volver al cat√°logo</a>
              </div>
            </div>
          </div>
        </div>
      </section>
    `;

    // ========== FUNCIONALIDAD DEL CARRUSEL ==========
    
    const thumbBar = container.querySelector(".product-thumbs");
    const carouselEl = container.querySelector("#" + carouselId);

    /**
     * Activa manualmente un slide espec√≠fico del carrusel
     * @param {number} idx - √çndice del slide a activar
     */
    function activateSlideManually(idx) {
      const items = carouselEl.querySelectorAll(".carousel-item");
      items.forEach((it,i) => it.classList.toggle("active", i===idx));
      
      const indBtns = carouselEl.querySelectorAll(".carousel-indicators [data-bs-slide-to]");
      indBtns.forEach((b,i) => b.classList.toggle("active", i===idx));
      
      thumbBar?.querySelectorAll("img").forEach((t,i) => t.classList.toggle("active", i===idx));
    }

    // Inicializaci√≥n del carrusel Bootstrap
    let bsCarousel = null;
    if (carouselEl && window.bootstrap && window.bootstrap.Carousel) {
      bsCarousel = new bootstrap.Carousel(carouselEl, { interval: false, ride: false });
      
      // Sincronizar miniaturas con slides del carrusel
      carouselEl.addEventListener("slid.bs.carousel", (e) => {
        const idx = e.to;
        thumbBar?.querySelectorAll("img").forEach((t,i) => {
          t.classList.toggle("active", i===idx);
        });
      });
    }

    // Event listeners para miniaturas
    thumbBar?.querySelectorAll("img").forEach(img => {
      img.addEventListener("click", () => {
        const idx = parseInt(img.getAttribute("data-idx"), 10);
        if (bsCarousel) { 
          bsCarousel.to(idx); 
        } else { 
          activateSlideManually(idx); 
        }
      });
    });

    // Fallback para cuando Bootstrap no est√° disponible
    if (!bsCarousel && carouselEl) {
      const prev = carouselEl.querySelector(".carousel-control-prev");
      const next = carouselEl.querySelector(".carousel-control-next");
      const items = carouselEl.querySelectorAll(".carousel-item");
      let current = [...items].findIndex(it => it.classList.contains("active"));
      if (current < 0) current = 0;

      function goTo(i) {
        if (i < 0) i = items.length - 1;
        if (i >= items.length) i = 0;
        current = i;
        activateSlideManually(current);
      }
      
      prev?.addEventListener("click", (e) => { 
        e.preventDefault(); 
        goTo(current - 1); 
      });
      
      next?.addEventListener("click", (e) => { 
        e.preventDefault(); 
        goTo(current + 1); 
      });
    }

    // ========== FUNCIONALIDAD AGREGAR AL CARRITO ==========

    const alerta = document.getElementById("alerta-carrito");

    // Event listener para a√±adir al carrito con cantidad personalizada
    const addBtn = document.getElementById("addToCartBtn");
    addBtn?.addEventListener("click", async () => {
      if (addBtn.disabled) return; // Prevenir m√∫ltiples clics
      
      let qty = parseInt(document.getElementById("qty").value, 10);
      if (isNaN(qty) || qty < 1) qty = 1;
      if (qty > 99) qty = 99;

      try {
        // Deshabilitar bot√≥n durante el proceso
        addBtn.disabled = true;
        addBtn.textContent = "Agregando...";
        
        // Simular proceso as√≠ncrono
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const cart = getCart();
        const item = cart.find(i => i.id === product.id);
        if (item) item.qty += qty; 
        else cart.push({ id: product.id, qty });
        localStorage.setItem("cart", JSON.stringify(cart));

        renderCartBadge(); // Actualizar contador global
        
        // Mostrar alerta de confirmaci√≥n
        if (alerta) {
          alerta.classList.add("mostrar");
          setTimeout(() => {
            alerta.classList.remove("mostrar");
          }, 3000);
        }
        
        console.log(`‚úÖ Producto ${product.id} agregado al carrito (cantidad: ${qty})`);
        
      } catch(error) {
        console.error('‚ùå Error al agregar al carrito:', error);
        alert('Error al agregar el producto al carrito. Por favor, intenta de nuevo.');
      } finally {
        // Restaurar bot√≥n
        addBtn.disabled = false;
        addBtn.textContent = "A√±adir al carrito";
      }
    });
    
    console.log('‚úÖ P√°gina de producto inicializada correctamente');
    
  } catch (error) {
    console.error('‚ùå Error al cargar producto:', error);
    container.innerHTML = `
      <div class="alert alert-danger">
        <h2>Error al cargar el producto</h2>
        <p>No se pudo cargar la informaci√≥n del producto. Por favor, intenta de nuevo.</p>
        <div class="d-flex gap-2">
          <button class="btn btn-primary" onclick="location.reload()">Recargar p√°gina</button>
          <a href="productos.html" class="btn btn-outline-primary">Volver al cat√°logo</a>
        </div>
      </div>
    `;
  }
});

// ==========================================
// 7. FUNCIONALIDAD DEL FORMULARIO DE CONTACTO
// ==========================================

/**
 * Inicializa validaci√≥n y env√≠o del formulario de contacto con procesamiento as√≠ncrono
 */
function initContactForm() {
  const form = document.getElementById("contact-form");
  const successMessage = document.getElementById("success-message");

  // Solo ejecutar si el formulario existe (p√°gina de contacto)
  if (!form || !successMessage) {
    console.log('Formulario de contacto no encontrado en esta p√°gina');
    return;
  }

  console.log('‚úÖ Formulario de contacto encontrado');

  // ========== MANEJO DEL ENV√çO DEL FORMULARIO ==========
  
  form.addEventListener("submit", async (event) => {
    console.log('üìß Procesando env√≠o de formulario');
    event.preventDefault();
    event.stopPropagation();

    const submitBtn = form.querySelector('button[type="submit"]');
    const isValid = form.checkValidity();
    form.classList.add('was-validated');

    if (!isValid) {
      console.log('‚ùå Formulario inv√°lido');
      return;
    }

    try {
      // Deshabilitar bot√≥n durante el env√≠o
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = "Enviando...";
      }

      // Simular env√≠o as√≠ncrono del formulario
      console.log('üîÑ Simulando env√≠o del formulario...');
      await new Promise(resolve => setTimeout(resolve, 2000)); // 2 segundos

      // Simular posible error de red (5% probabilidad)
      if (Math.random() < 0.05) {
        throw new Error('Error de conexi√≥n al servidor');
      }

      console.log('‚úÖ Formulario enviado exitosamente');
      
      // Mostrar mensaje de √©xito
      setTimeout(() => {
        successMessage.classList.remove("d-none");
        form.reset();
        form.classList.remove('was-validated');
        
        // Scroll suave hacia el mensaje de √©xito
        successMessage.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }, 500);

    } catch (error) {
      console.error('‚ùå Error al enviar formulario:', error);
      alert('Error al enviar el formulario. Por favor, intenta de nuevo.');
    } finally {
      // Restaurar bot√≥n
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = "Enviar mensaje";
      }
    }
  });

  // ========== VALIDACI√ìN EN TIEMPO REAL ==========
  
  const inputs = form.querySelectorAll('.form-control');
  console.log('Inputs encontrados:', inputs.length);
  
  inputs.forEach(input => {
    input.addEventListener('input', () => {
      if (input.checkValidity()) {
        input.classList.remove('is-invalid');
        input.classList.add('is-valid');
      } else {
        input.classList.remove('is-valid');
        input.classList.add('is-invalid');
      }
    });
    
    input.addEventListener('blur', () => {
      if (input.value.trim() !== '') {
        if (input.checkValidity()) {
          input.classList.remove('is-invalid');
          input.classList.add('is-valid');
        } else {
          input.classList.remove('is-valid');
          input.classList.add('is-invalid');
        }
      }
    });
  });

  console.log('‚úÖ Formulario de contacto inicializado correctamente');
}

// ==========================================
// 8. MEJORA DE ACCESIBILIDAD DEL CARRUSEL
// ==========================================

/**
 * Caracter√≠sticas mejoradas de accesibilidad del carrusel principal
 */
function initCarouselAccessibility() {
  console.log('üîß Inicializando accesibilidad del carrusel');
  
  const carousel = document.getElementById('heroCarousel');
  
  if (!carousel) {
    console.log('Carrusel principal no encontrado en esta p√°gina');
    return;
  }
  
  // ========== ACTUALIZACI√ìN DE ESTADOS ARIA ==========
  
  carousel.addEventListener('slid.bs.carousel', function(e) {
    const activeIndex = e.to;
    
    const indicators = carousel.querySelectorAll('.carousel-indicators button');
    indicators.forEach((indicator, index) => {
      indicator.setAttribute('aria-selected', index === activeIndex ? 'true' : 'false');
    });
    
    console.log('üé† Carrusel cambi√≥ a diapositiva:', activeIndex + 1);
  });
  
  // ========== NAVEGACI√ìN POR TECLADO ==========
  
  const indicators = carousel.querySelectorAll('.carousel-indicators button');
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('keydown', function(e) {
      let newIndex = index;
      
      switch(e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          newIndex = index > 0 ? index - 1 : indicators.length - 1;
          break;
        case 'ArrowRight':
          e.preventDefault();
          newIndex = index < indicators.length - 1 ? index + 1 : 0;
          break;
        case 'Home':
          e.preventDefault();
          newIndex = 0;
          break;
        case 'End':
          e.preventDefault();
          newIndex = indicators.length - 1;
          break;
        default:
          return;
      }
      
      indicators[newIndex].focus();
      indicators[newIndex].click();
    });
  });

  console.log('‚úÖ Accesibilidad del carrusel inicializada correctamente');
}

// ==========================================
// 9. INICIALIZACI√ìN DE LA APLICACI√ìN
// ==========================================

/**
 * Funci√≥n principal de inicializaci√≥n de la aplicaci√≥n con manejo as√≠ncrono
 */
async function initApp() {
  // Prevenir m√∫ltiples inicializaciones
  if (window.appInitialized) return;   
  window.appInitialized = true;
  
  console.log('üöÄ Inicializando aplicaci√≥n con carga as√≠ncrona');
  console.log('üìÑ Estado de document ready:', document.readyState);
  console.log('üîó P√°gina actual:', window.location.pathname);
  
  try {
    // ========== INICIALIZACI√ìN INMEDIATA ==========
    
    // Inicializar contador de carrito (siempre presente)
    renderCartBadge();
    console.log('‚úÖ Badge del carrito inicializado');

    // Inicializar accesibilidad del carrusel (si existe)
    initCarouselAccessibility();
    
    // Inicializar formulario de contacto (si existe)
    initContactForm();
    
    // ========== INICIALIZACI√ìN AS√çNCRONA ==========
    
    // Crear array de promesas para inicializaci√≥n concurrente
    const initPromises = [];
    
    // Productos destacados (home/cat√°logo) - as√≠ncrono
    if (document.getElementById("products-container") || document.getElementById("products-carousel-container")) {
      initPromises.push(
        initProductos().catch(error => {
          console.error('‚ùå Error en initProductos:', error);
        })
      );
    }
    
    // Cat√°logo completo (productos.html) - as√≠ncrono
    if (document.querySelector(".grilla")) {
      initPromises.push(
        initCatalogPage().catch(error => {
          console.error('‚ùå Error en initCatalogPage:', error);
        })
      );
    }
    
    // Ejecutar todas las inicializaciones as√≠ncronas en paralelo
    if (initPromises.length > 0) {
      console.log(`üîÑ Ejecutando ${initPromises.length} inicializaciones as√≠ncronas...`);
      await Promise.allSettled(initPromises);
    }
    
    console.log('üéâ Inicializaci√≥n completada exitosamente');
    
    // Disparar evento personalizado para indicar que la app est√° lista
    window.dispatchEvent(new CustomEvent('hermanos-jota-ready', {
      detail: { timestamp: Date.now() }
    }));
    
  } catch (error) {
    console.error('‚ùå Error cr√≠tico durante la inicializaci√≥n:', error);
  }
}

// ========== CONFIGURACI√ìN DE EVENT LISTENERS ==========

// Ejecutar cuando el DOM est√© listo
if (document.readyState === 'loading') {
  console.log('‚è≥ DOM cargando, esperando DOMContentLoaded...');
  document.addEventListener('DOMContentLoaded', initApp);
} else {
  console.log('‚úÖ DOM ya listo, ejecutando inmediatamente');
  initApp();
}

// Respaldo: ejecutar tambi√©n en window.load por seguridad
window.addEventListener('load', function() {
  console.log('üîÑ Window load event disparado');
  if (!window.appInitialized) {
    console.log('‚ö†Ô∏è  Ejecutando inicializaci√≥n de respaldo');
    initApp();
  } else {
    console.log('‚úÖ Aplicaci√≥n ya inicializada anteriormente');
  }
});

// Event listener para el evento personalizado (opcional, para debugging)
window.addEventListener('hermanos-jota-ready', function(e) {
  console.log('üéä Aplicaci√≥n Hermanos Jota completamente cargada:', new Date(e.detail.timestamp));
});
